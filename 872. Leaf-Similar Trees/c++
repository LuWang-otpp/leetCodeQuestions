/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> r1;
        
        stack<TreeNode*> q;
        if(root1 != NULL) q.push(root1);
        
        while(!q.empty()){
            TreeNode* current = q.top();
            q.pop();
            
            if(current->left == NULL && current->right == NULL) r1.push_back(current->val);
            else{
                if(current->left != NULL) q.push(current->left);
                if(current->right != NULL) q.push(current->right);
            }
        }
        
        if(root2 != NULL) q.push(root2);
        
        int counter = 0; 
        
        while(!q.empty()){
            TreeNode* current = q.top();
            q.pop();
            
            if(current->left == NULL && current->right == NULL){
                if(current->val != r1[counter]) return false;
                
                counter++;
            }
            else{
                if(current->left != NULL) q.push(current->left);
                if(current->right != NULL) q.push(current->right);
            }
        }
        
        return true;
    }
};