/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int result = 0;
    
    int longestUnivaluePath(TreeNode* root) {
        if(!root) return 0;
        
        helper(root);
        
        return result;
    }
    
     int helper(TreeNode* cur){
         if(!cur) return 0;
         
         int stackLeft = helper(cur->left);
         int stackRight = helper(cur->right);
         
         
         if(cur->left && cur->left->val == cur->val) {
             stackLeft++;
         }else{
             stackLeft = 0;
         }
         if(cur->right && cur->right->val == cur->val) {
             stackRight++;
         }else{
             stackRight = 0;
         }
         
         result = max(result, stackLeft+stackRight);
         
         return max(stackLeft,stackRight);
     }
};