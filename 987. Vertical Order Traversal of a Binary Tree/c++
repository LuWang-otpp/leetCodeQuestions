/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(!root) return {};
    
        
        
        map<pair<int, int>, set<int>> m;
        int x_max = INT_MIN;
        int x_min = INT_MAX;

        helper(root, 0, 0, m, x_max, x_min);
        
        vector< vector<int> > results(x_max - x_min + 1);
        
        for(auto & mm: m){
            int x = mm.first.second - x_min;
            
            results[x].insert(end(results[x]), begin(mm.second), end(mm.second));
        }
        return results;
    }
    
    void helper(TreeNode * root, 
                int x,
                int y,
                map<pair<int, int>, set<int>>& m,
                int& x_max,
                int& x_min){
        if(!root) return;
        
        m[{y, x}].insert(root->val);
        
        x_max = max(x_max, x);
        x_min = min(x_min, x);
        
        helper(root->left, x-1, y+1, m, x_max, x_min);
        helper(root->right, x+1, y+1, m, x_max, x_min);
        
        
    }
};